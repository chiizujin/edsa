* CREATE
inst
* Create as a nest
new: simp 2 17 32206 "bounty bugs" 1 0 100
attr 194
perm 90
bhvr 3
clac 0
accg 3
elas 0
fric 100
* Get creator positioning
setv va00 game "CreatorX"
setv va01 game "CreatorY"
* If no values then assume this is C3 only
doif va00 eq 0 and va01 eq 0
  * Move it to a safe C3 location (just above the incubator area)
  setv va00 rand 1400 1550
  setv va01 400
  endi
pose 0
mvsf va00 va01
tick 80

* BUG OVs
* ov01 - movement direction
* ov02 - 1 = picked up
* ov03 - timer counter
* ov04 - life counter
* ov05 - 1 = half eaten
* ov06 - last X position - used for wall detection
* ov07 - collision check counter

* ACTIVATE 1
scrp 2 17 32206 1
  * Create Bounty Bug
  lock
  * Check if nest is in the inventory - thanks to Uttar for this
  setv va00 0
  seta va01 targ
  targ game "c3_inventory"
  epas 2 17 32206
    doif va01 eq targ
      setv va00 1
    endi
  next
  * Create if not in inventory
  doif va00 eq 0
    setv va01 posx
    setv va02 posy
    subv va01 18
    subv va02 25
    * Decide colour
    setv va03 rand 1 3
    doif va03 eq 1
      setv va04 1
    elif va03 eq 2
      setv va04 11
    else
      setv va04 21
    endi
    new: simp 2 13 32206 "bounty bugs" 10 va04 3000
    attr 194
*    attr 198
    bhvr 0
    accg 3
    elas 0
    fric 10
    puhl -1 23 25
    mvto va01 va02
    snde "bbg1"
    anim [0 0 1 1 2 2 1 1 255 0]
    * Decide which way to go
    doif rand 1 2 eq 1
      setv ov01 2
    else
      setv ov01 -2
    endi
    setv ov02 0
    setv ov03 0
    setv ov04 0
    setv ov05 0
    setv ov07 0
    wait 10
    bhvr 48
    tick 1
  endi
endm

* ACTIVATE 2
scrp 2 17 32206 2
  call 1 0 0
endm

* TIMER
scrp 2 17 32206 9
  * Randomly create a bug
  doif rand 1 5 eq 1
    call 1 0 0
    * Push me!
    urge sign 0.5 1 0.5
  endi
endm

* PICK UP
scrp 2 17 32206 4
  tick 0
  bhvr 0
endm

* DROP
scrp 2 17 32206 5
  tick 80
  bhvr 3
endm

* BUG SCRIPTS

* ACTIVATE 1
scrp 2 13 32206 1
  * Work out where it will appear
  setv va01 posx
  setv va02 posy
  doif ov01 gt 0
    addv va01 20
    setv va03 rand 5 10
  else
    subv va01 40
    setv va03 rand -5 -10
  endi
  setv ov06 va01
  * Decide what to create
  setv va04 rand 1 9
  * Create a toy? Less likely
  setv va05 rand 1 15
  doif va05 eq 1
    setv va04 10
  endi
  doif va04 eq 1
    * Red apple
    new: simp 2 8 32206 "bounty" 2 0 2500
    attr 194 bhvr 48 accg 2 fric 100 elas 25 tick 2000
  elif va04 eq 2
    * Green apple
    new: simp 2 8 32205 "bounty" 2 2 2500
    attr 194 bhvr 48 accg 2 fric 100 elas 25 tick 2000
  elif va04 eq 3
    * Banana
    new: simp 2 8 32204 "bounty" 3 4 2500
    attr 194 bhvr 48 accg 2 fric 100 elas 25 puhl -1 27 20 tick 2000
  elif va04 eq 4
    * Cheese sandwich
    new: simp 2 11 32206 "bounty" 2 7 2500
    attr 194 bhvr 48 accg 2 fric 100 elas 25 tick 2000
  elif va04 eq 5
    * Gingerbread man
    new: simp 2 11 32205 "bounty" 2 13 2500
    attr 194 bhvr 48 accg 2 fric 100 elas 25 tick 2000
  elif va04 eq 6
    * Sushi roll
    new: simp 2 11 32204 "bounty" 2 15 2500
    attr 194 bhvr 48 accg 2 fric 100 elas 25 tick 2000
  elif va04 eq 7
    * Pod of peas
    new: simp 2 3 32206 "bounty" 2 17 2500
    attr 194 bhvr 48 accg 2 fric 100 elas 25 tick 2000
  elif va04 eq 8
    * Green chilli
    new: simp 2 3 32205 "bounty" 2 21 2500
    attr 194 bhvr 48 accg 2 fric 100 elas 25 tick 2000
  elif va04 eq 9
    * Red chilli
    new: simp 2 3 32204 "bounty" 2 19 2500
    attr 194 bhvr 48 accg 2 fric 100 elas 25 tick 2000
  elif va04 eq 10
    * Cube
    new: simp 2 21 32206 "bounty" 4 9 2500
    attr 194 bhvr 35 accg 2 fric 100 elas 25
  endi
  mvsf va01 va02
  velo va03 rand -5 -10
  targ ownr
endm

* TIMER
scrp 2 13 32206 9
  * Keep moving unless half eaten, that would be silly
  doif ov05 eq 0
    velo ov01 vely
  endi
  * Increment timer counters
  addv ov03 1
  addv ov04 1
  addv ov07 1
  * Check if still in same place
  doif ov07 ge 5 and ov05 eq 0
    setv ov07 0
    setv va01 posx
    setv va02 posx
    subv va01 5
    addv va02 5
    doif ov06 gt va01 and ov06 lt va02
      negv ov01
      * Look appealing
      urge sign 0.9 12 0.9
      * Set collision counter to -1 to flag collision
      setv ov07 -1
    endi
    setv ov06 posx
  endi
  * Pick another random direction unless half eaten or collision
  doif ov03 ge 100 and ov05 eq 0 and ov07 ne -1
    doif rand 1 2 eq 1
       setv ov01 2
     else
      setv ov01 -2
    endi
    * Look appealing
    urge sign 0.9 12 0.9
    * Reset counter
    setv ov03 0
  endi
  * Check if bug is in the inventory - thanks to Uttar for this
  setv va00 0
  seta va01 targ
  targ game "c3_inventory"
  epas 2 13 32206
    doif va01 eq targ
      setv va00 1
    endi
  next
  * Decide whether to die or release bounty
  doif ov04 ge 500
    setv va01 rand 1 250
    doif va01 eq 1 or va01 eq 2
      * Stop moving & remove hand/creature rights
      tick 0
*      attr 192 - this causes invalid map pos sometimes :(
      bhvr 0
      fric 100
      anim []
      doif ov05 eq 0
        pose 0
      endi
    endi
    doif va01 eq 2 and ov05 eq 0 and va00 eq 0
      * Release bounty unless half eaten or in inventory
      wait 10
      doif ov01 gt 0
        anim [0 7 8 9 9 8 7 0]
      else
        anim [0 4 5 6 6 5 4 0]
      endi
      wait 2
      snde "bbg2"
      * Activate 1 is used to test so just call it
      call 1 0 0
      wait 20
    endi
    doif va01 eq 1 or va01 eq 2
      * Fade out - use lock since attr breaks
      lock
      setv va02 0
      loop
        inst
        alph va02 1
        addv va02 1
        slow
      untl va02 gt 256
      kill targ
    endi
  endi
endm

* PICK UP
scrp 2 13 32206 4
*  stim writ from 85 1
  * Reduce boredom
  setv va01 itof rand -1 -2
  divv va01 10.0
  targ from
  chem 159 va01
  targ ownr
  * Do nothing else if half eaten
  doif ov05 eq 0
    inst
    tick 0
    setv ov02 1
    anim []
    pose 2
  endi
endm

* DROP
scrp 2 13 32206 5
  * Do nothing if half eaten
  doif ov05 eq 0
    pose 0
    * Decide which way to go
    doif rand 1 2 eq 1
      setv ov01 2
    else
      setv ov01 -2
    endi
    wait 50
    tick 1
    anim [0 0 1 1 2 2 1 1 255 0]
    setv ov02 0
  endi
endm

* EAT
scrp 2 13 32206 12
  tick 0
  lock
  inst
  snde "reat"
*  stim writ from 85 2
  stim writ from 80 1
  * Reduce boredom
  setv va01 itof rand -1 -3
  divv va01 10.0
  targ from
  chem 159 va01
  targ ownr
  * Two bites
  doif ov05 eq 0
    setv ov05 1
    pose 3
    tick 1
  else
    kill ownr
  endi
endm

rscr
  * Kill bounty
  enum 2 8 32206
    kill targ
  next
  enum 2 8 32205
    kill targ
  next
  enum 2 8 32204
    kill targ
  next
  enum 2 11 32206
    kill targ
  next
  enum 2 11 32205
    kill targ
  next
  enum 2 11 32204
    kill targ
  next
  enum 2 3 32206
    kill targ
  next
  enum 2 3 32205
    kill targ
  next
  enum 2 3 32204
    kill targ
  next
  enum 2 21 32206
    kill targ
  next
  * Kill bugs
  enum 2 13 32206
    kill targ
  next
  * Kill nests
  enum 2 17 32206
    kill targ
  next
  * Nest scripts
  scrx 2 17 32206 1
  scrx 2 17 32206 2
  scrx 2 17 32206 9
  scrx 2 17 32206 4
  scrx 2 17 32206 5
  * Bug scripts
  scrx 2 13 32206 1
  scrx 2 13 32206 9
  scrx 2 13 32206 4
  scrx 2 13 32206 5
  scrx 2 13 32206 12
  * Bounty scripts
  scrx 2 8 32206 12
  scrx 2 8 32206 9
  scrx 2 8 32205 12
  scrx 2 8 32205 9
  scrx 2 8 32204 12
  scrx 2 8 32204 9
  scrx 2 11 32206 12
  scrx 2 11 32206 9
  scrx 2 11 32205 12
  scrx 2 11 32205 9
  scrx 2 11 32204 12
  scrx 2 11 32204 9
  scrx 2 3 32206 12
  scrx 2 3 32206 9
  scrx 2 3 32205 12
  scrx 2 3 32205 9
  scrx 2 3 32204 12
  scrx 2 3 32204 9
  * Cube scripts
  scrx 2 21 32206 1
  scrx 2 21 32206 2
  scrx 2 21 32206 6
